name: Scheduled Maintenance

on:
  schedule:
    - cron: '0 4 * * 0'  # Weekly on Sundays at 4 AM UTC
    - cron: '0 5 1 * *'  # Monthly on the 1st at 5 AM UTC
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to perform'
        required: true
        default: 'weekly'
        type: choice
        options:
          - weekly
          - monthly
          - dependency-update
          - submodule-sync
          - cleanup
      force_execution:
        description: 'Force execution even if no changes detected'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  actions: read

concurrency:
  group: maintenance-${{ github.ref }}
  cancel-in-progress: false

jobs:
  submodule-synchronization:
    name: Submodule Synchronization
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 4 * * 0' || github.event.inputs.maintenance_type == 'weekly' || github.event.inputs.maintenance_type == 'submodule-sync'
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check submodule status
        id: submodule-check
        run: |
          echo "Checking submodule synchronization status..."

          if [ -f .gitmodules ]; then
            echo "Submodules configured:"
            cat .gitmodules

            # Check for submodule updates
            git submodule foreach git fetch origin
            UPDATES_AVAILABLE=false

            # Check each submodule for updates
            git submodule foreach '
              CURRENT=$(git rev-parse HEAD)
              LATEST=$(git rev-parse origin/HEAD 2>/dev/null || git rev-parse origin/main 2>/dev/null || git rev-parse origin/master 2>/dev/null)
              if [ "$CURRENT" != "$LATEST" ]; then
                echo "Updates available for $name: $CURRENT -> $LATEST"
                echo "updates_available=true" >> $GITHUB_OUTPUT
              fi
            '
          else
            echo "No submodules configured"
            echo "updates_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Update submodules
        if: steps.submodule-check.outputs.updates_available == 'true' || github.event.inputs.force_execution == 'true'
        run: |
          echo "Updating submodules to latest commits..."
          git submodule update --remote --merge

          # Check for changes
          if git diff --quiet --cached; then
            echo "No submodule updates to commit"
          else
            echo "Submodule updates detected"
            git config user.name "YokaKit Maintenance Bot"
            git config user.email "maintenance@yokakit.com"
            git add .
            git commit -m "chore: update submodules to latest commits

Constitutional compliance: Submodule synchronization maintenance
Phase 0 maintenance cycle - automated submodule updates
PinkieIt reference: automated-maintenance-$(date +%Y%m%d)

ðŸ¤– Generated with Claude Code
Co-Authored-By: Claude <noreply@anthropic.com>"

            # Create pull request for submodule updates
            BRANCH_NAME="maintenance/submodule-sync-$(date +%Y%m%d)"
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"

            # Note: Actual PR creation would require gh CLI or GitHub API
            echo "Submodule updates committed to branch: $BRANCH_NAME"
          fi

  dependency-maintenance:
    name: Dependency Maintenance
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 5 1 * *' || github.event.inputs.maintenance_type == 'monthly' || github.event.inputs.maintenance_type == 'dependency-update'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        if: hashFiles('package.json') != ''

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer
        if: hashFiles('composer.json') != ''

      - name: Check for outdated dependencies
        id: dependency-check
        run: |
          echo "Checking for outdated dependencies..."
          UPDATES_NEEDED=false

          # Check npm dependencies
          if [ -f package.json ]; then
            echo "Checking npm dependencies..."
            npm outdated --json > npm-outdated.json 2>/dev/null || true
            if [ -s npm-outdated.json ]; then
              echo "npm updates available"
              UPDATES_NEEDED=true
            fi
          fi

          # Check Composer dependencies
          if [ -f composer.json ]; then
            echo "Checking Composer dependencies..."
            composer outdated --format=json > composer-outdated.json 2>/dev/null || true
            if [ -s composer-outdated.json ]; then
              echo "Composer updates available"
              UPDATES_NEEDED=true
            fi
          fi

          echo "updates_needed=$UPDATES_NEEDED" >> $GITHUB_OUTPUT

      - name: Generate dependency update report
        if: steps.dependency-check.outputs.updates_needed == 'true'
        run: |
          echo "## Dependency Update Report" > dependency-report.md
          echo "Generated: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md

          if [ -f npm-outdated.json ] && [ -s npm-outdated.json ]; then
            echo "### NPM Dependencies" >> dependency-report.md
            echo "\`\`\`json" >> dependency-report.md
            cat npm-outdated.json >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
            echo "" >> dependency-report.md
          fi

          if [ -f composer-outdated.json ] && [ -s composer-outdated.json ]; then
            echo "### Composer Dependencies" >> dependency-report.md
            echo "\`\`\`json" >> dependency-report.md
            cat composer-outdated.json >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
          fi

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-update-report
          path: |
            dependency-report.md
            npm-outdated.json
            composer-outdated.json
          retention-days: 30
        if: steps.dependency-check.outputs.updates_needed == 'true'

  repository-cleanup:
    name: Repository Cleanup
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 5 1 * *' || github.event.inputs.maintenance_type == 'monthly' || github.event.inputs.maintenance_type == 'cleanup'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean temporary files
        run: |
          echo "Cleaning temporary files and caches..."

          # Clean node_modules if it exists but shouldn't be in repo
          if [ -d node_modules ] && grep -q "node_modules" .gitignore; then
            echo "Removing node_modules directory"
            rm -rf node_modules
          fi

          # Clean vendor if it exists but shouldn't be in repo
          if [ -d vendor ] && grep -q "vendor" .gitignore; then
            echo "Removing vendor directory"
            rm -rf vendor
          fi

          # Clean common temporary files
          find . -name "*.tmp" -type f -delete 2>/dev/null || true
          find . -name "*.log" -type f -not -path "./.git/*" -delete 2>/dev/null || true
          find . -name ".DS_Store" -type f -delete 2>/dev/null || true

          echo "Repository cleanup completed"

      - name: Check repository health
        run: |
          echo "Checking repository health..."

          # Check .gitignore completeness
          if [ ! -f .gitignore ]; then
            echo "âš  No .gitignore file found"
          else
            echo "âœ“ .gitignore file exists"
          fi

          # Check for large files that shouldn't be in repo
          LARGE_FILES=$(find . -type f -size +10M -not -path "./.git/*" 2>/dev/null || true)
          if [ -n "$LARGE_FILES" ]; then
            echo "âš  Large files found in repository:"
            echo "$LARGE_FILES"
          else
            echo "âœ“ No large files detected"
          fi

          # Check branch protection status (would require API access)
          echo "âœ“ Branch protection check would require GitHub API access"

  constitutional-compliance-check:
    name: Constitutional Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Verify YokaKit identity preservation
        run: |
          echo "## Constitutional Compliance Maintenance Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for YokaKit branding consistency
          YOKAKIT_REFS=$(grep -r "YokaKit" . --exclude-dir=.git --exclude-dir=node_modules | wc -l)
          PINKIEIT_REFS=$(grep -r "PinkieIt" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=pinkieit | wc -l)

          echo "### Identity Preservation Status:" >> $GITHUB_STEP_SUMMARY
          echo "- YokaKit references: $YOKAKIT_REFS" >> $GITHUB_STEP_SUMMARY
          echo "- PinkieIt references in user-facing files: $PINKIEIT_REFS" >> $GITHUB_STEP_SUMMARY

          if [ "$PINKIEIT_REFS" -gt 0 ]; then
            echo "âš  PinkieIt references found in user-facing files" >> $GITHUB_STEP_SUMMARY
            grep -r "PinkieIt" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=pinkieit >> $GITHUB_STEP_SUMMARY || true
          else
            echo "âœ“ YokaKit identity properly preserved" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Verify phase structure integrity
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Phase Structure Status:" >> $GITHUB_STEP_SUMMARY

          if [ -d specs/ ]; then
            PHASE_SPECS=$(find specs/ -name "*phase*" | wc -l)
            echo "- Phase specifications found: $PHASE_SPECS" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f .github/workflows/ci-cd-enhanced.yml ]; then
            echo "âœ“ Enhanced CI/CD workflow present" >> $GITHUB_STEP_SUMMARY
          else
            echo "âš  Enhanced CI/CD workflow missing" >> $GITHUB_STEP_SUMMARY
          fi

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [submodule-synchronization, dependency-maintenance, repository-cleanup, constitutional-compliance-check]
    if: always()
    steps:
      - name: Generate maintenance summary
        run: |
          echo "## YokaKit_Replay Scheduled Maintenance Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Maintenance Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Maintenance Type:** ${{ github.event.inputs.maintenance_type || 'scheduled' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Maintenance Task Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Submodule Sync: ${{ needs.submodule-synchronization.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Check: ${{ needs.dependency-maintenance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Repository Cleanup: ${{ needs.repository-cleanup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Constitutional Compliance: ${{ needs.constitutional-compliance-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Scheduled Maintenance:" >> $GITHUB_STEP_SUMMARY
          echo "- Weekly: Every Sunday at 4 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "- Monthly: 1st of each month at 5 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Phase 0 Repository Infrastructure - Automated Maintenance*" >> $GITHUB_STEP_SUMMARY