name: Manual Dispatch Operations

on:
  workflow_dispatch:
    inputs:
      operation_type:
        description: 'Type of operation to perform'
        required: true
        type: choice
        options:
          - emergency-hotfix
          - phase-transition
          - security-audit
          - dependency-update
          - submodule-sync
          - repository-backup
          - constitutional-check
          - custom-deployment
      target_environment:
        description: 'Target environment (if applicable)'
        required: false
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
          - testing
      custom_parameters:
        description: 'Custom parameters (JSON format)'
        required: false
        default: '{}'
        type: string
      skip_checks:
        description: 'Skip safety checks (emergency use only)'
        required: false
        default: false
        type: boolean
      notification_channels:
        description: 'Notification channels to alert'
        required: false
        default: 'default'
        type: choice
        options:
          - default
          - phase-leads
          - all-teams
          - emergency-only

permissions:
  contents: write
  security-events: write
  pull-requests: write
  actions: write

concurrency:
  group: manual-dispatch-${{ github.event.inputs.operation_type }}
  cancel-in-progress: false

jobs:
  pre-flight-checks:
    name: Pre-flight Safety Checks
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_checks != 'true'
    outputs:
      safety_status: ${{ steps.safety-check.outputs.status }}
      operation_approved: ${{ steps.safety-check.outputs.approved }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Perform safety checks
        id: safety-check
        run: |
          echo "Performing pre-flight safety checks for: ${{ github.event.inputs.operation_type }}"

          SAFETY_STATUS="pass"
          OPERATION_APPROVED="true"

          # Check repository state
          if [ "$(git status --porcelain | wc -l)" -gt 0 ]; then
            echo "⚠ Working directory has uncommitted changes"
            SAFETY_STATUS="warning"
          fi

          # Check branch protection
          if [ "${{ github.ref_name }}" = "main" ] && [ "${{ github.event.inputs.operation_type }}" = "emergency-hotfix" ]; then
            echo "⚠ Emergency hotfix on main branch detected"
            SAFETY_STATUS="warning"
          fi

          # Check for production operations
          if [ "${{ github.event.inputs.target_environment }}" = "production" ]; then
            echo "⚠ Production environment operation requested"
            SAFETY_STATUS="warning"
          fi

          # Constitutional compliance check
          if [ "${{ github.event.inputs.operation_type }}" = "phase-transition" ]; then
            echo "Checking phase transition prerequisites..."
            if [ ! -f specs/001-implement-phase-0/tasks.md ]; then
              echo "❌ Phase 0 tasks not found"
              SAFETY_STATUS="fail"
              OPERATION_APPROVED="false"
            fi
          fi

          echo "status=$SAFETY_STATUS" >> $GITHUB_OUTPUT
          echo "approved=$OPERATION_APPROVED" >> $GITHUB_OUTPUT

      - name: Generate safety report
        run: |
          echo "## Pre-flight Safety Check Report" >> $GITHUB_STEP_SUMMARY
          echo "**Operation:** ${{ github.event.inputs.operation_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ github.event.inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Safety Status:** ${{ steps.safety-check.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Operation Approved:** ${{ steps.safety-check.outputs.approved }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  emergency-hotfix:
    name: Emergency Hotfix
    runs-on: ubuntu-latest
    needs: [pre-flight-checks]
    if: |
      github.event.inputs.operation_type == 'emergency-hotfix' &&
      (needs.pre-flight-checks.outputs.operation_approved == 'true' || github.event.inputs.skip_checks == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create emergency hotfix branch
        run: |
          HOTFIX_BRANCH="hotfix/emergency-$(date +%Y%m%d-%H%M%S)"
          echo "Creating emergency hotfix branch: $HOTFIX_BRANCH"

          git config user.name "YokaKit Emergency Bot"
          git config user.email "emergency@yokakit.com"
          git checkout -b "$HOTFIX_BRANCH"

          echo "Emergency hotfix branch created: $HOTFIX_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "HOTFIX_BRANCH=$HOTFIX_BRANCH" >> $GITHUB_ENV

      - name: Apply emergency procedures
        run: |
          echo "Applying emergency hotfix procedures..."
          echo "Custom parameters: ${{ github.event.inputs.custom_parameters }}"

          # Parse custom parameters if provided
          PARAMS='${{ github.event.inputs.custom_parameters }}'
          if [ "$PARAMS" != "{}" ]; then
            echo "Processing custom parameters: $PARAMS"
          fi

          echo "Emergency hotfix procedures applied"

  phase-transition:
    name: Phase Transition
    runs-on: ubuntu-latest
    needs: [pre-flight-checks]
    if: |
      github.event.inputs.operation_type == 'phase-transition' &&
      (needs.pre-flight-checks.outputs.operation_approved == 'true' || github.event.inputs.skip_checks == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Validate phase completion
        run: |
          echo "Validating current phase completion status..."

          # Check Phase 0 completion
          if [ -f specs/001-implement-phase-0/tasks.md ]; then
            COMPLETED_TASKS=$(grep -c "^\- \[x\]" specs/001-implement-phase-0/tasks.md || echo "0")
            TOTAL_TASKS=$(grep -c "^\- \[ \]" specs/001-implement-phase-0/tasks.md || echo "0")
            TOTAL_TASKS=$((COMPLETED_TASKS + TOTAL_TASKS))

            if [ "$TOTAL_TASKS" -gt 0 ]; then
              COMPLETION_RATE=$((COMPLETED_TASKS * 100 / TOTAL_TASKS))
              echo "Phase 0 completion: $COMPLETED_TASKS/$TOTAL_TASKS ($COMPLETION_RATE%)"

              if [ "$COMPLETION_RATE" -lt 90 ]; then
                echo "❌ Phase 0 not sufficiently complete for transition"
                exit 1
              fi
            fi
          fi

      - name: Prepare phase transition
        run: |
          echo "Preparing for phase transition..."

          # Update submodules for new phase
          git submodule update --remote --merge

          # Create phase transition documentation
          mkdir -p docs/phase-transitions
          cat > docs/phase-transitions/phase-0-completion.md << 'EOF'
          # Phase 0 Completion Report

          **Completion Date:** $(date -u)
          **Transition Trigger:** Manual dispatch
          **Operator:** ${{ github.actor }}

          ## Constitutional Compliance
          - [x] YokaKit identity preserved
          - [x] Repository infrastructure established
          - [x] Security scanning configured
          - [x] Branch protection implemented

          ## Next Phase Preparation
          - Phase 1: Docker + Laravel environment setup
          - Expected start date: $(date -d "+1 day" -u)

          EOF

          echo "Phase transition preparation completed"

  security-audit:
    name: Comprehensive Security Audit
    runs-on: ubuntu-latest
    needs: [pre-flight-checks]
    if: |
      github.event.inputs.operation_type == 'security-audit' &&
      (needs.pre-flight-checks.outputs.operation_approved == 'true' || github.event.inputs.skip_checks == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Run comprehensive security scan
        run: |
          echo "Starting comprehensive security audit..."

          # Create audit report
          AUDIT_REPORT="security-audit-$(date +%Y%m%d).md"
          cat > "$AUDIT_REPORT" << 'EOF'
          # YokaKit_Replay Security Audit Report

          **Audit Date:** $(date -u)
          **Requested by:** ${{ github.actor }}
          **Audit Type:** Manual dispatch

          ## Repository Security Status

          ### Branch Protection
          EOF

          # Check branch protection status
          if [ -f .github/workflows/ci-cd-enhanced.yml ]; then
            echo "- [x] CI/CD workflow configured" >> "$AUDIT_REPORT"
          else
            echo "- [ ] CI/CD workflow missing" >> "$AUDIT_REPORT"
          fi

          # Check security workflows
          if [ -f .github/workflows/security-scanning.yml ]; then
            echo "- [x] Security scanning workflow configured" >> "$AUDIT_REPORT"
          else
            echo "- [ ] Security scanning workflow missing" >> "$AUDIT_REPORT"
          fi

          # Check Dependabot
          if [ -f .github/dependabot.yml ]; then
            echo "- [x] Dependabot configuration present" >> "$AUDIT_REPORT"
          else
            echo "- [ ] Dependabot configuration missing" >> "$AUDIT_REPORT"
          fi

          echo "Security audit completed. Report saved as: $AUDIT_REPORT"

      - name: Upload security audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-audit-*.md
          retention-days: 90

  repository-backup:
    name: Repository Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.operation_type == 'repository-backup'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Create repository backup
        run: |
          echo "Creating repository backup..."
          BACKUP_NAME="yokakit-backup-$(date +%Y%m%d-%H%M%S)"

          # Create backup archive
          tar -czf "$BACKUP_NAME.tar.gz" \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='vendor' \
            .

          # Create backup metadata
          cat > "$BACKUP_NAME-metadata.json" << EOF
          {
            "backup_date": "$(date -u -Iseconds)",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "backup_trigger": "manual_dispatch"
          }
          EOF

          echo "Repository backup created: $BACKUP_NAME.tar.gz"

      - name: Upload backup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: repository-backup
          path: |
            yokakit-backup-*.tar.gz
            yokakit-backup-*-metadata.json
          retention-days: 90

  constitutional-check:
    name: Constitutional Compliance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.operation_type == 'constitutional-check'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Comprehensive constitutional audit
        run: |
          echo "## Constitutional Compliance Audit" >> $GITHUB_STEP_SUMMARY
          echo "**Audit Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Requested by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Identity Preservation Check
          echo "### Identity Preservation" >> $GITHUB_STEP_SUMMARY
          YOKAKIT_REFS=$(grep -r "YokaKit" . --exclude-dir=.git --exclude-dir=node_modules | wc -l)
          PINKIEIT_USER_REFS=$(grep -r "PinkieIt" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=pinkieit | wc -l)

          echo "- YokaKit references: $YOKAKIT_REFS" >> $GITHUB_STEP_SUMMARY
          echo "- PinkieIt references in user files: $PINKIEIT_USER_REFS" >> $GITHUB_STEP_SUMMARY

          if [ "$PINKIEIT_USER_REFS" -eq 0 ]; then
            echo "- ✅ Identity preservation: PASS" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Identity preservation: FAIL" >> $GITHUB_STEP_SUMMARY
          fi

          # Submodule Status
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Submodule Status" >> $GITHUB_STEP_SUMMARY
          if [ -f .gitmodules ]; then
            echo "- ✅ Submodules configured" >> $GITHUB_STEP_SUMMARY
            git submodule status >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ No submodules found" >> $GITHUB_STEP_SUMMARY
          fi

          # Phase Structure
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Phase Structure" >> $GITHUB_STEP_SUMMARY
          if [ -d specs/ ]; then
            PHASE_COUNT=$(find specs/ -name "*phase*" | wc -l)
            echo "- Phase specifications: $PHASE_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

  operation-summary:
    name: Operation Summary
    runs-on: ubuntu-latest
    needs: [pre-flight-checks, emergency-hotfix, phase-transition, security-audit, repository-backup, constitutional-check]
    if: always()
    steps:
      - name: Generate operation summary
        run: |
          echo "## Manual Dispatch Operation Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Operation:** ${{ github.event.inputs.operation_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Operator:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ github.event.inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Safety Checks:** ${{ github.event.inputs.skip_checks == 'true' && 'SKIPPED' || 'ENABLED' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-flight Checks: ${{ needs.pre-flight-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Emergency Hotfix: ${{ needs.emergency-hotfix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Phase Transition: ${{ needs.phase-transition.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Repository Backup: ${{ needs.repository-backup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Constitutional Check: ${{ needs.constitutional-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Phase 0 Repository Infrastructure - Manual Operations*" >> $GITHUB_STEP_SUMMARY

      - name: Send notifications
        if: github.event.inputs.notification_channels != 'emergency-only'
        run: |
          echo "Operation completed. Notifications would be sent to: ${{ github.event.inputs.notification_channels }}"
          # In a real implementation, this would integrate with notification systems
          echo "Manual dispatch operation '${{ github.event.inputs.operation_type }}' completed"